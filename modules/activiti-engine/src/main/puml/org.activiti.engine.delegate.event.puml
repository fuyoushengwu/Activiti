@startuml
hide @unlinked
package "org.activiti.engine.delegate.event" {
interface ActivitiActivityCancelledEvent extends ActivitiActivityEvent,ActivitiCancelledEvent {
}
interface ActivitiActivityEvent extends ActivitiEvent {
    + getActivityId():String
    + getActivityName():String
    + getActivityType():String
    + getBehaviorClass():String
}
interface ActivitiCancelledEvent extends ActivitiEvent {
    + getCause():Object
}
interface ActivitiEntityEvent extends ActivitiEvent {
    + getEntity():Object
}
interface ActivitiEntityWithVariablesEvent extends ActivitiEntityEvent {
    + getVariables():Map
    + isLocalScope():boolean
}
interface ActivitiErrorEvent extends ActivitiActivityEvent {
    + getErrorCode():String
}
interface ActivitiEvent {
    + getType():ActivitiEventType
    + getExecutionId():String
    + getProcessInstanceId():String
    + getEngineServices():EngineServices
}
ActivitiEvent ..> ActivitiEventType
ActivitiEvent ..> org.activiti.engine.EngineServices
interface ActivitiEventDispatcher {
    + addEventListener(ActivitiEventListener):void
    + addEventListener(ActivitiEventListener,ActivitiEventType... types):void
    + removeEventListener(ActivitiEventListener):void
    + dispatchEvent(ActivitiEvent event):void
    + setEnabled(boolean enabled):void
    + isEnabled():boolean
}
interface ActivitiEventListener {
    + onEvent(ActivitiEvent event):void
    + isFailOnException():boolean
}
enum ActivitiEventType {
  ENTITY_CREATED
  ENTITY_INITIALIZED
  ENTITY_UPDATED
  ENTITY_DELETED
  ENTITY_SUSPENDED
  ENTITY_ACTIVATED
  TIMER_FIRED
  JOB_CANCELED
  JOB_EXECUTION_SUCCESS
  JOB_EXECUTION_FAILURE
  JOB_RETRIES_DECREMENTED
  CUSTOM
  ENGINE_CREATED
  ENGINE_CLOSED
  ACTIVITY_STARTED
  ACTIVITY_COMPLETED
  ACTIVITY_CANCELLED
  ACTIVITY_SIGNALED
  ACTIVITY_COMPENSATE
  ACTIVITY_MESSAGE_RECEIVED
  ACTIVITY_ERROR_RECEIVED
  HISTORIC_ACTIVITY_INSTANCE_CREATED
  HISTORIC_ACTIVITY_INSTANCE_ENDED
  SEQUENCEFLOW_TAKEN
  UNCAUGHT_BPMN_ERROR
  VARIABLE_CREATED
  VARIABLE_UPDATED
  VARIABLE_DELETED
  TASK_CREATED
  TASK_ASSIGNED
  TASK_COMPLETED
  PROCESS_STARTED
  PROCESS_COMPLETED
  PROCESS_COMPLETED_WITH_ERROR_END_EVENT
  PROCESS_CANCELLED
  HISTORIC_PROCESS_INSTANCE_CREATED
  HISTORIC_PROCESS_INSTANCE_ENDED
  MEMBERSHIP_CREATED
  MEMBERSHIP_DELETED
  MEMBERSHIPS_DELETED

  getTypesFromString(String): ActivitiEventType[]
}
interface ActivitiExceptionEvent {
    + getCause():Throwable
}
interface ActivitiMembershipEvent extends ActivitiEvent {
    + getUserId():String
    + getGroupId():String
}
interface ActivitiMessageEvent extends ActivitiActivityEvent {
    + getMessageName():String
    + getMessageData():Object
}
interface ActivitiProcessStartedEvent extends ActivitiEntityWithVariablesEvent {
    + getNestedProcessInstanceId():String
    + getNestedProcessDefinitionId():String
}
interface ActivitiSequenceFlowTakenEvent extends ActivitiEvent {
    + getId():String
    + getSourceActivityId():String
    + getSourceActivityName():String
    + getSourceActivityType():String
    + getSourceActivityBehaviorClass():String
    + getTargetActivityId():String
    + getTargetActivityName():String
    + getTargetActivityTYpe():String
    + getTargetActivityBehaviorClass():String
}
interface ActivitiSignalEvent extends ActivitiActivityEvent {
    + getSignalName():String
    + getSignalData():Object
}
interface ActivitiVariableEvent extends ActivitiEvent {
    + getVariableName():String
    + getVariableValue():String
    + getVariableType():org.activiti.engine.impl.variable.VariableType
    + getExecutionId():String
    + getTaskId():String
}
class BaseEntityEventListener implements ActivitiEventListener {
    # failOnException:boolean
    # entityClass:Class<?>
    + BaseEntityEventListener()
    + BaseEntityEventListener(boolean failOnException)
    + BaseEntityEventListener(boolean failOnException,Class<?> entityClass)
    + onEvent(ActivitiEvent event):void
    + isFailOnException():boolean
    # isValidEvent(ActivitiEvent event):boolean
    # onCreate(ActivitiEvent event):void
    # onInitialized(ActivitiEvent event):void
    # onDelete(ActivitiEvent event):void
    # onUpdate(ActivitiEvent event):void
    # onEntityEvent(ActivitiEvent event):void

}

/' package finished '/
@enduml